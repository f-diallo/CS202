Fatmata (Fatima) Diallo	CS 202		10/9/19
Project 5:
Purpose:
The purpose of this program was to learn how to use inheritance in classes and practicing operator overloading in the different classes. We practiced this by creating a program that tests whether the constructors and functions of the base and derived classes work.
Design:
The design was composed of the main function which was given, two classes where one builds on the other, functions in those classes, and the use of header and source files where those classes were stored.
	Vehicle Class and its Functions: I wrote a Vehicle class with a few functions. I first declared the protected data members m_lla and m_vin for the latitude, longitude, and altitude of the location and the vehicle identification number. I also created a s_idgen private member which generates identification numbers. Then, I created a default constructor, parameterized constructor, copy constructor, and get and set functions for the appropriate data members in the Vehicle class.
	Car Class and its Functions: I wrote a Car class with a few functions. I first declared the private data members m_plates and m_throttle for the car license plate and the throttle setting/speed. Then, I created a default constructor, parameterized constructor, copy constructor, and get and set functions for the m_plates and m_throttle members in the Vehicle class. I also used the m_lla and m_vin from the vehicle class in some functions. All of the constructors and function produced debug output to ensure they worked. I created an assignment operator- function to assign member values to the calling object of another Car object. I also made a move function that changed the location of the car and set the throttle by calling the drive function.
	Output from Given Main Function: In the output of the given main function, it tests for the base default constructor and prints out the VIN in the debug output. Then, it tests the base insertion operator and prints out the VIN and location in the debug output. Then, it test the base Parameterized constructor and prints out the inputted VIN and location in the debug output. As it goes it prints out the bas idgen which increments with every new vehicle or car. Then, the base copy constructor copies the same output except for the VIN. Then, it tests the assignment operator function which assigns the values of one object to another. Then, it tests the move function which does not work in the base class. Moving on to the derived class, the main function tests the default constructor which creates a new car and therefore a new vehicle with a new VIN. Then, it tests the insertion operator, whose debug output prints out the VIN, plates, throttle, and location. As it goes, the idgen increments and is 2 at this point. Then, it tests the parameterized constructor, which prints out the same debug output except the input received for VIN and plates. Then, it tests the copy constructor which forms a new VIN, incrementing idgen, and copies the data to a new car object. Then, the derived assignment operator assigns those values to the original object. Lastly, the move function is called, telling the user to drive the car at the given throttle and updates the location. Finally, it calls the destructors, letting me know with the debug output, for all the objects that were created.

Problems: 
I had trouble initializing s_idgen. The compiler kept telling a non const static member could not be initialized at declaration. I also had trouble with the makefile, but eventually also figured it out.

